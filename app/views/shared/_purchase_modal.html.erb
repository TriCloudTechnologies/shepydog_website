<!-- Modal -->
<div class="modal fade" id="purchaseModal" tabindex="-1" aria-labelledby="purchaseModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <%= image_tag "logo.png", class: "img-fluid me-4", width: "40px" %>
        <h1 class="modal-title fs-5" id="exampleModalLabel">Purchase Shepydogs</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <button class="btn bg-color-gold" onclick="adjustValue(-1)">-</button>
        <input class="text-end" id="purchase_coinCount" type="number" onchange="adjustPurchaseCoinCount()" />
        <button class="btn bg-color-gold" onclick="adjustValue(1)">+</button>
      </div>

      <div class="row px-4">
        <div class="col-12">
          <span class="fs-5 fw-bold me-3">Total Amount:</span>
          <span id="purchase_totalCoins" class="me-2">0</span>
          <span class="me-2">x</span>
          <span id="ethValue" class="me-2"><%= @token_details[9].to_f/10**18 %></span>
          <span class="me-2">ETH</span>
          <span class="me-2"> = </span>
          <span id="purchase_totalAmount" class="me-2">0</span>
          <span>ETH</span>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn bg-color-gold" onclick="proceedPayment()">Proceed</button>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  function adjustPurchaseCoinCount(){
    const purchase_inputCoinCount = event.target;
    document.getElementById('totalGiftCoins').innerHTML = purchase_inputCoinCount.value;

    let purchase_valueElement = document.getElementById('ethValue');
    const purchase_numberString = purchase_valueElement.textContent || purchase_valueElement.innerText;
    const purchase_numberValue = parseFloat(purchase_numberString);
    document.getElementById('purchase_totalAmount').innerHTML = (purchase_numberValue * purchase_inputCoinCount.value).toFixed(6);
  }

  function adjustValue(value) {
    const purchase_input = document.getElementById('purchase_coinCount');
    purchase_input.value = Number(purchase_input.value) + value;
    document.getElementById('purchase_totalCoins').innerHTML = purchase_input.value;

    let purchase_valueElement = document.getElementById('ethValue');
    const purchase_numberString = purchase_valueElement.textContent || purchase_valueElement.innerText;
    const purchase_numberValue = parseFloat(purchase_numberString);
    document.getElementById('purchase_totalAmount').innerHTML = (purchase_numberValue * purchase_input.value).toFixed(6);
  }

  async function proceedPayment() {
    const purchase_coinsCount = document.getElementById('purchase_coinCount').value;
    const purchase_totalAmount = document.getElementById('purchase_totalAmount').innerHTML;

    const purchase_contractAddress = '0xADB2288bc444a6E76D723C27Fc8a100b1446b96a';
    const purchase_provider = new ethers.providers.Web3Provider(window.ethereum);
    const purchase_signer = purchase_provider.getSigner(); 
    const purchase_contractABI = [
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenQuantity",
            "type": "uint256"
          }
        ],
        "name": "buySaleTokens",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      }
    ];

    const purchase_contract = new ethers.Contract(purchase_contractAddress, purchase_contractABI, purchase_signer);

    purchase_contract.buySaleTokens(parseInt(purchase_coinsCount), { value: ethers.utils.parseEther(purchase_totalAmount) });

    $("#purchaseModal").modal('hide');
    $(".modal-backdrop").addClass('d-none')
    alert('Continue on Metamask.');
  }
</script>